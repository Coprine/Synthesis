#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>
#include <math.h>

struct DreamObj
{
    char name[12];
    char mainTrait;
    int organic;
    int artificial;
    int abstract;
    int transmuteTolerant;
    int inspectTolerant;
    int seedTolerant;
};

    // Array containing the objects for each stage
    struct DreamObj objectArray[5];



// List of names for objects of each tendency
char organicNames[7][12] = {"ERROR 1", "Worm", "Fly", "Mouse", "Cat", "Wolf", "Tree"};
char artificialNames[7][12] = {"Plate", "Table", "Shelf", "Chair", "Lamp", "Book", "Clock"};
char abstractNames[7][12] = {"ERROR 2", "Painting", "Television", "Mirror", "Symbol", "Light", "Shadow"};



/////////////////////////////// START OBJECT CREATION FUNCTIONS //////////////////////////////



// Sets name and determines main trait of object
void typeCalibrate(int index)
{

    // Checks for if the object's organic score is the highest
    if(objectArray[index].organic >= objectArray[index].artificial && objectArray[index].organic >= objectArray[index].abstract)
    {
      // Object's trait set to organic
      objectArray[index].mainTrait = *"o";
      // Object's name set to its corresponding manifestation
      strcpy(objectArray[index].name, organicNames[objectArray[index].organic]);
      return;
      // Checks if the object's artificial score is the highest
    } 
    if(objectArray[index].artificial > objectArray[index].organic && objectArray[index].artificial >= objectArray[index].abstract)
    {
      // Object's trait set to artificial
      objectArray[index].mainTrait = *"r";
      // Object's name set to its corresponding manifestation
      strcpy(objectArray[index].name, artificialNames[objectArray[index].artificial]);
      return; 
    } 
    // Checks if the object's abstract trait is the highest
    // Object's trait set to abstract
    objectArray[index].mainTrait = *"a";
    // Object's name set to its corresponding manifestation
    strcpy(objectArray[index].name, abstractNames[objectArray[index].abstract]);
}

//Calculates an object's tolerances to various actions
void toleranceCalc(int index)
{
  // Will be linked to world later on
  double globalTTolerantMod = 1;
  double globalITolerantMod = 1;
  double globalSTolerantMod = 1;


  int organic = objectArray[index].organic;
  int artificial = objectArray[index].artificial;
  int abstract = objectArray[index].abstract;

  // Sets variable to be transmute tolerance
  // Formula is a percent equal to a random number 0 through 50 plus 16.66 percent for every point the object has in organic, minus 8.3 percent for each point the object has in artificial. It is then modified by the world's transmute tolerance modifier.
  double transmuteTolerantMod = ((rand()%50)*0.01+((double)organic/6)-((double)artificial/12))*globalTTolerantMod;
  if(transmuteTolerantMod<0)
  {transmuteTolerantMod = 0;}
  if(transmuteTolerantMod>1)
  {transmuteTolerantMod = 1;}
  objectArray[index].transmuteTolerant = floor(transmuteTolerantMod * 100);

  // Sets variable to be inspect tolerance
  // Formula is a percent equal to a random number 0 through 50 plus 16.66 percent for every point the object has in artificial, minus 8.3 percent for each point the object has in abstract. It is then modified by the world's inspect tolerance modifier.
  double inspectTolerantMod = ((rand()%50)*0.01+((double)artificial/6)-((double)abstract/12))*globalITolerantMod;
  if(inspectTolerantMod<0)
  {inspectTolerantMod = 0;}
  if(inspectTolerantMod>1)
  {inspectTolerantMod = 1;}
  objectArray[index].inspectTolerant = floor(inspectTolerantMod * 100);

  // Sets variable to be seed tolerance
  // Formula is a percent equal to a random number 0 through 50 plus 16.66 percent for every point the object has in abstract, minus 8.3 percent for each point the object has in organic. It is then modified by the world's seed tolerance modifier.
  double seedTolerantMod = ((rand()%50)*0.01+((double)abstract/6)-((double)organic/12))*globalSTolerantMod;
  if(seedTolerantMod<0)
  {seedTolerantMod = 0;}
  if(seedTolerantMod>1)
  {seedTolerantMod = 1;}
  objectArray[index].seedTolerant = floor(seedTolerantMod * 100);
}


// Creates a new random object
void createObject(int index)
{

    // Sets tendency traits for new object
    int newOrg = rand()%7;
    int newArt = rand()%7;
    int newAbs = rand()%7;

    objectArray[index].organic = newOrg;
    objectArray[index].artificial = newArt;
    objectArray[index].abstract = newAbs;

    // Sets name and determines main trait of object
    typeCalibrate(index);
    // Sets object's tolerances
    toleranceCalc(index);
}


/////////////////////////////// END OBJECT CREATION FUNCTIONS //////////////////////////////


/////////////////////////////// START OBJECT MODIFICATION FUNCTIONS //////////////////////////

// Transmutes object, making its stats move by a random amount
void transmute(int index)
{
  // Checks against transmute chance, returns if failed
  int transmuteCheck = rand()%100;
  if(transmuteCheck>=objectArray[index].transmuteTolerant)
  {
    printf("Transmutation failed.\n");
    return;
  }

  // Changes object's organic stat by a number between -3 and 4
  objectArray[index].organic += rand()%8-3;
  if(objectArray[index].organic > 7)
  {
    objectArray[index].organic = 7;
  } 
  if(objectArray[index].organic < 0)
  {
    objectArray[index].organic = 0;
  }

  // Changes object's artificial stat by a number between -3 and 4
  objectArray[index].artificial += rand()%8-3;
  if(objectArray[index].artificial > 7)
  {
    objectArray[index].artificial = 7;
  } 
  if(objectArray[index].artificial < 0)
  {
    objectArray[index].artificial = 0;
  }

  // Changes object's abstract stat by a number between -3 and 4
  objectArray[index].abstract += rand()%8-4;
  if(objectArray[index].abstract > 7)
  {
    objectArray[index].abstract = 7;
  } 
  if(objectArray[index].abstract < 0)
  {
    objectArray[index].abstract = 0;
  }

  // Sets object's other stats according to its new traits
  typeCalibrate(index);
  toleranceCalc(index);
  
}

// Accessory function to inspect, evaluates traits and categorizes them by their value
int traitCategorize(int trait)
{
  if(trait < 3)
  {
    return 0;
  }
  if(trait < 5)
  {
    return 1;
  }
  if(trait < 7)
  {
    return 2;
  }
  return 3;
}

// Identifies object, revealing its information to the user
void inspect(int index)
{
  // Checks against inspect chance, returns if failed
  int transmuteCheck = rand()%100;
  if(transmuteCheck>=objectArray[index].inspectTolerant)
  {
    printf("Identification failed.\n");
    return;
  }

  // Array of titles for different intensities of each trait
  char intensityArray[4][10] = {"barely", "somewhat", "strongly", "intensely"};  

  // Indexes of intensityArray corresponding to the object's trait
  int organicIndex = traitCategorize(objectArray[index].organic);
  int artificialIndex = traitCategorize(objectArray[index].artificial);
  int abstractIndex = traitCategorize(objectArray[index].abstract);

  // Prints identifying information
  printf("The %s is\n%s organic,\n%s artificial, and\n%s abstract", objectArray[index].name, intensityArray[organicIndex], intensityArray[artificialIndex], intensityArray[abstractIndex]);
  
}

/////////////////////////////// END OBJECT MODIFICATION FUNCTIONS //////////////////////////



// Main function
int main()
{
    // Initialize random number generator
    srand(time(NULL));

    while(1)
    {
        // Populate the main array with functional dream objects
        for(int i = 0; i<5; i++)
        {
            // Calls function to construct relevant DreamObj
            createObject(i);
            // DEBUG TEXT
            printf("Object %d's type is %s.\n It is a %s\n Org: %d\n Art: %d\n Abs: %d\nTransmute Tolerance: %d%%\nInspect Tolerance: %d%%\nSeed Tolerance: %d%%\n", i, &objectArray[i].mainTrait, objectArray[i].name, objectArray[i].organic, objectArray[i].artificial, objectArray[i].abstract, objectArray[i].transmuteTolerant, objectArray[i].inspectTolerant, objectArray[i].seedTolerant);
            // END DEBUG TEXT
        }

        // Awaits user input, but only once. Will need replaced but works for debugging
        scanf("among us");
    }


    return 0;
}
